// src/app/api/D-approve/D-approve/route.ts
import { NextRequest, NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import { getDApproveData } from "@/lib/modules/DApproveModule";

// üîê ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏Ç‡∏≠‡∏á JWT payload ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
interface JWTPayload {
  userId?: number | string;
  username?: string;
  fullName?: string;
  roles?: string[];
  permissions?: string[];
  formaccess?: string[];
  Dep?: string[];
  ForgetPass?: string,
}

export async function POST(req: NextRequest) {
  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å cookie
    const token = req.cookies.get("auth_token")?.value;
    if (!token) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà type JWTPayload
    const decoded = jwt.verify(
      token,
      process.env.JWT_SECRET || "your_secret_key"
    );

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ decoded ‡πÄ‡∏õ‡πá‡∏ô JWTPayload ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    if (typeof decoded !== "object" || decoded === null || !("userId" in decoded)) {
      return NextResponse.json({ error: "Invalid token payload" }, { status: 400 });
    }

    const payload = decoded as JWTPayload;

    // ‚úÖ ‡∏£‡∏±‡∏ö body ‡∏à‡∏≤‡∏Å request
    const body = await req.json();

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô getDApproveData ‡πÇ‡∏î‡∏¢ merge formaccess ‡∏à‡∏≤‡∏Å body ‡∏´‡∏£‡∏∑‡∏≠ token
    const data = await getDApproveData({
      ...body,
      formaccess: body.formaccess || payload.formaccess || [],
    });

    return NextResponse.json(data);
  } catch (err) {
    console.error("POST /api/D-approve/D-approve error:", err);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}
